// <auto-generated>
// This file was generated by DTOMaker.CSPoco.
// NuGet: https://www.nuget.org/packages/DTOMaker.CSPoco
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using DTOMaker.Runtime;
using System;
using System.Runtime.CompilerServices;

namespace MyOrg.Models.CSPoco
{
    public partial class MyDTO : IMyDTO, IFreezable, IEquatable<MyDTO>
    {
        // todo move to base
        private volatile bool _frozen;
        public bool IsFrozen() => _frozen;
        public IFreezable PartCopy() => new MyDTO(this);

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void ThrowIsFrozenException(string? methodName) => throw new InvalidOperationException($"Cannot call {methodName} when frozen.");

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private ref T IfNotFrozen<T>(ref T value, [CallerMemberName] string? methodName = null)
        {
            if (_frozen) ThrowIsFrozenException(methodName);
            return ref value;
        }

        public void Freeze()
        {
            if (_frozen) return;
            _frozen = true;
            // todo freeze base
            // todo freeze model type refs
        }

        public MyDTO() { }
        public MyDTO(IMyDTO source, bool frozen = false)
        {
            _frozen = frozen;
            // todo base ctor
            // todo freezable members
            _Field1 = source.Field1;
        }

        private Double _Field1;
        [Obsolete("Removed", false)]
        public Double Field1
        {
            get => _Field1;
            set => _Field1 = IfNotFrozen(ref value);
        }


        public bool Equals(MyDTO? other)
        {
            if (other is null) return false;
            // todo if (!base.Equals(other)) return false;
            if (!_Field1.Equals(other.Field1)) return false;
            return true;
        }

        public override bool Equals(object? obj)
        {
            return obj is MyDTO other && Equals(other);
        }

        private int CalcHashCode()
        {
            HashCode result = new HashCode();
            // todo result.Add(base.GetHashCode());
            result.Add(_Field1);
            return result.ToHashCode();
        }

        private int? _hashCode;
        public override int GetHashCode()
        {
            if (!_frozen) return CalcHashCode();
            if (_hashCode is null) _hashCode = CalcHashCode();
            return _hashCode.Value;
        }

    }
}
