// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using DTOMaker.Runtime;
namespace MyOrg.Models.MemBlocks
{
    public sealed partial class MyDTO : IMyDTO, IFreezable
    {
        private const int BlockLength = 128;
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;
        public ReadOnlyMemory<byte> Block => _frozen ? _readonlyBlock : _writableBlock.ToArray();

        public MyDTO() => _readonlyBlock = _writableBlock = new byte[BlockLength];

        public MyDTO(ReadOnlySpan<byte> source, bool frozen)
        {
            Memory<byte> memory = new byte[BlockLength];
            source.Slice(0, BlockLength).CopyTo(memory.Span);
            _readonlyBlock = memory;
            _writableBlock = memory;
            _frozen = frozen;
        }

        public MyDTO(ReadOnlyMemory<byte> source)
        {
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source.Slice(0, BlockLength);
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.Slice(0, BlockLength).Span.CopyTo(memory.Span);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
            _frozen = true;
        }
        // todo move to base
        private volatile bool _frozen = false;
        public bool IsFrozen() => _frozen;
        public IFreezable PartCopy() => new MyDTO(this);

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void ThrowIsFrozenException(string? methodName) => throw new InvalidOperationException($"Cannot call {methodName} when frozen.");

        public void Freeze()
        {
            if (_frozen) return;
            _frozen = true;
            // todo freeze base
            // todo freeze model type refs
        }

        public MyDTO(MyDTO source)
        {
            // todo base ctor
            // todo freezable members
            _writableBlock = source._writableBlock.ToArray();
            _readonlyBlock = _writableBlock;
            _frozen = false;
        }

        public MyDTO(IMyDTO source) : this(ReadOnlySpan<byte>.Empty, false)
        {
            // todo base ctor
            // todo freezable members
            this.Field1 = source.Field1;
            this.Field2 = source.Field2;
            this.Field3 = source.Field3;
            this.Field4 = source.Field4;
            this.Field5 = source.Field5;
            this.Field6 = source.Field6;
            this.Field7 = source.Field7;
            this.Field8 = source.Field8;
            this.Field9 = source.Field9;
            this.Field10 = source.Field10;
            this.Field11 = source.Field11;
            this.Field12 = source.Field12;
            this.Field13 = source.Field13;
            this.Field14 = source.Field14;
            this.Field15 = source.Field15;
            this.Field16 = source.Field16;
            this.Field17 = source.Field17;
        }

        public Boolean Field1
        {
            get
            {
                return (Boolean)DTOMaker.Runtime.Codec_Boolean_LE.ReadFromSpan(_readonlyBlock.Slice(0, 1).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field1));
                DTOMaker.Runtime.Codec_Boolean_LE.WriteToSpan(_writableBlock.Slice(0, 1).Span, value);
            }
        }

        public SByte Field2
        {
            get
            {
                return (SByte)DTOMaker.Runtime.Codec_SByte_LE.ReadFromSpan(_readonlyBlock.Slice(1, 1).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field2));
                DTOMaker.Runtime.Codec_SByte_LE.WriteToSpan(_writableBlock.Slice(1, 1).Span, value);
            }
        }

        public Byte Field3
        {
            get
            {
                return (Byte)DTOMaker.Runtime.Codec_Byte_LE.ReadFromSpan(_readonlyBlock.Slice(2, 1).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field3));
                DTOMaker.Runtime.Codec_Byte_LE.WriteToSpan(_writableBlock.Slice(2, 1).Span, value);
            }
        }

        public Int16 Field4
        {
            get
            {
                return (Int16)DTOMaker.Runtime.Codec_Int16_LE.ReadFromSpan(_readonlyBlock.Slice(4, 2).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field4));
                DTOMaker.Runtime.Codec_Int16_LE.WriteToSpan(_writableBlock.Slice(4, 2).Span, value);
            }
        }

        public UInt16 Field5
        {
            get
            {
                return (UInt16)DTOMaker.Runtime.Codec_UInt16_LE.ReadFromSpan(_readonlyBlock.Slice(6, 2).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field5));
                DTOMaker.Runtime.Codec_UInt16_LE.WriteToSpan(_writableBlock.Slice(6, 2).Span, value);
            }
        }

        public Char Field6
        {
            get
            {
                return (Char)DTOMaker.Runtime.Codec_Char_LE.ReadFromSpan(_readonlyBlock.Slice(8, 2).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field6));
                DTOMaker.Runtime.Codec_Char_LE.WriteToSpan(_writableBlock.Slice(8, 2).Span, value);
            }
        }

        public Half Field7
        {
            get
            {
                return (Half)DTOMaker.Runtime.Codec_Half_LE.ReadFromSpan(_readonlyBlock.Slice(10, 2).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field7));
                DTOMaker.Runtime.Codec_Half_LE.WriteToSpan(_writableBlock.Slice(10, 2).Span, value);
            }
        }

        public Int32 Field8
        {
            get
            {
                return (Int32)DTOMaker.Runtime.Codec_Int32_LE.ReadFromSpan(_readonlyBlock.Slice(12, 4).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field8));
                DTOMaker.Runtime.Codec_Int32_LE.WriteToSpan(_writableBlock.Slice(12, 4).Span, value);
            }
        }

        public UInt32 Field9
        {
            get
            {
                return (UInt32)DTOMaker.Runtime.Codec_UInt32_LE.ReadFromSpan(_readonlyBlock.Slice(16, 4).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field9));
                DTOMaker.Runtime.Codec_UInt32_LE.WriteToSpan(_writableBlock.Slice(16, 4).Span, value);
            }
        }

        public Single Field10
        {
            get
            {
                return (Single)DTOMaker.Runtime.Codec_Single_LE.ReadFromSpan(_readonlyBlock.Slice(20, 4).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field10));
                DTOMaker.Runtime.Codec_Single_LE.WriteToSpan(_writableBlock.Slice(20, 4).Span, value);
            }
        }

        public Int64 Field11
        {
            get
            {
                return (Int64)DTOMaker.Runtime.Codec_Int64_LE.ReadFromSpan(_readonlyBlock.Slice(24, 8).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field11));
                DTOMaker.Runtime.Codec_Int64_LE.WriteToSpan(_writableBlock.Slice(24, 8).Span, value);
            }
        }

        public UInt64 Field12
        {
            get
            {
                return (UInt64)DTOMaker.Runtime.Codec_UInt64_LE.ReadFromSpan(_readonlyBlock.Slice(32, 8).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field12));
                DTOMaker.Runtime.Codec_UInt64_LE.WriteToSpan(_writableBlock.Slice(32, 8).Span, value);
            }
        }

        public Double Field13
        {
            get
            {
                return (Double)DTOMaker.Runtime.Codec_Double_LE.ReadFromSpan(_readonlyBlock.Slice(40, 8).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field13));
                DTOMaker.Runtime.Codec_Double_LE.WriteToSpan(_writableBlock.Slice(40, 8).Span, value);
            }
        }

        public Guid Field14
        {
            get
            {
                return (Guid)DTOMaker.Runtime.Codec_Guid_LE.ReadFromSpan(_readonlyBlock.Slice(48, 16).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field14));
                DTOMaker.Runtime.Codec_Guid_LE.WriteToSpan(_writableBlock.Slice(48, 16).Span, value);
            }
        }

        public Int128 Field15
        {
            get
            {
                return (Int128)DTOMaker.Runtime.Codec_Int128_LE.ReadFromSpan(_readonlyBlock.Slice(64, 16).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field15));
                DTOMaker.Runtime.Codec_Int128_LE.WriteToSpan(_writableBlock.Slice(64, 16).Span, value);
            }
        }

        public UInt128 Field16
        {
            get
            {
                return (UInt128)DTOMaker.Runtime.Codec_UInt128_LE.ReadFromSpan(_readonlyBlock.Slice(80, 16).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field16));
                DTOMaker.Runtime.Codec_UInt128_LE.WriteToSpan(_writableBlock.Slice(80, 16).Span, value);
            }
        }

        public Decimal Field17
        {
            get
            {
                return (Decimal)DTOMaker.Runtime.Codec_Decimal_LE.ReadFromSpan(_readonlyBlock.Slice(96, 16).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field17));
                DTOMaker.Runtime.Codec_Decimal_LE.WriteToSpan(_writableBlock.Slice(96, 16).Span, value);
            }
        }

    }
}
