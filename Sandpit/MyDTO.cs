// <auto-generated>
// This file was generated by DTOMaker.MemBlocks.
// NuGet: https://www.nuget.org/packages/DTOMaker.MemBlocks
// Warning: Changes made to this file will be lost if re-generated.
// </auto-generated>
#pragma warning disable CS0414
#nullable enable
using System;
using System.Buffers.Binary;
using System.Collections;
using System.Collections.Specialized;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using DataFac.Memory;
using DTOMaker.Runtime;
namespace MyOrg.Models.MemBlocks
{
    public sealed partial class MyDTO : IMyDTO, IFreezable
    {
        private const int BlockLength = 4;
        private readonly Memory<byte> _writableBlock;
        private readonly ReadOnlyMemory<byte> _readonlyBlock;
        public ReadOnlyMemory<byte> Block => _frozen ? _readonlyBlock : _writableBlock.ToArray();

        public MyDTO() => _readonlyBlock = _writableBlock = new byte[BlockLength];

        public MyDTO(ReadOnlySpan<byte> source, bool frozen)
        {
            Memory<byte> memory = new byte[BlockLength];
            source.Slice(0, BlockLength).CopyTo(memory.Span);
            _readonlyBlock = memory;
            _writableBlock = memory;
            _frozen = frozen;
        }

        public MyDTO(ReadOnlyMemory<byte> source)
        {
            if (source.Length >= BlockLength)
            {
                _readonlyBlock = source.Slice(0, BlockLength);
            }
            else
            {
                // forced copy as source is too short
                Memory<byte> memory = new byte[BlockLength];
                source.Slice(0, BlockLength).Span.CopyTo(memory.Span);
                _readonlyBlock = memory;
            }
            _writableBlock = Memory<byte>.Empty;
            _frozen = true;
        }
        // todo move to base
        private volatile bool _frozen = false;
        public bool IsFrozen => _frozen;
        public IFreezable PartCopy() => new MyDTO(this);

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void ThrowIsFrozenException(string? methodName) => throw new InvalidOperationException($"Cannot call {methodName} when frozen.");

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private ref T IfNotFrozen<T>(ref T value, [CallerMemberName] string? methodName = null)
        {
            if (_frozen) ThrowIsFrozenException(methodName);
            return ref value;
        }

        public void Freeze()
        {
            if (_frozen) return;
            _frozen = true;
            // todo freeze base
            // todo freeze model type refs
        }

        public MyDTO(MyDTO source)
        {
            // todo base ctor
            // todo freezable members
            _writableBlock = source._writableBlock.ToArray();
            _readonlyBlock = _writableBlock;
            _frozen = false;
        }

        public MyDTO(IMyDTO source) : this(ReadOnlySpan<byte>.Empty, false)
        {
            // todo base ctor
            // todo freezable members
            // todo copy members
            this.Field2_HasValue = source.Field2_HasValue;
            this.Field2_Value = source.Field2_Value;
            this.Field3_Length = source.Field3_Length;
            this.Field3_Values = source.Field3_Values;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void ThrowOutOfRangeException(int count, int maxCount) => throw new ArgumentOutOfRangeException(nameof(count), count, $"0 <= {nameof(count)} <= {maxCount}");

        public bool Field2_HasValue
        {
            get
            {
                const int _valueOffset = 16;
                return Codec_Boolean_LE.ReadFromSpan(_readonlyBlock.Slice(_valueOffset, 1).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field2_HasValue));
                const int _valueOffset = 16;
                Codec_Boolean_LE.WriteToSpan(_writableBlock.Slice(_valueOffset, 1).Span, value);
            }
        }
        public double Field2_Value
        {
            get
            {
                const int _valueOffset = 16;
                return Codec_Double_LE.ReadFromSpan(_readonlyBlock.Slice(_valueOffset, 8).Span);
            }

            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field2_Value));
                const int _valueOffset = 16;
                Codec_Double_LE.WriteToSpan(_writableBlock.Slice(_valueOffset, 8).Span, value);
            }
        }

        public double? Field2
        {
            get { return Field2_HasValue ? Field2_Value : null; }
            set
            {
                Field2_HasValue = value is not null;
                Field2_Value = value is null ? default : value.Value;
            }
        }

        public int Field3_Length
        {
            get
            {
                const int _valueOffset = 16;
                return Codec_Int32_LE.ReadFromSpan(_readonlyBlock.Slice(_valueOffset, 4).Span);
            }
            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Field3_Length));
                const int _valueOffset = 16;
                Codec_Int32_LE.WriteToSpan(_writableBlock.Slice(_valueOffset, 4).Span, value);
            }
        }

        public ReadOnlyMemory<byte> Field3_Values
        {
            get
            {
                const int _maxCapacity = 64;
                const int _valueOffset = 16;
                return _readonlyBlock.Slice(_valueOffset, _maxCapacity);
            }

            set
            {
                const int _maxCapacity = 64;
                const int _valueOffset = 16;
                if (_frozen) ThrowIsFrozenException(nameof(Field3_Values));
                if (value.Length > _maxCapacity)
                {
                    ThrowOutOfRangeException(value.Length, _maxCapacity);
                    return;
                }
                var fullSlice = _writableBlock.Slice(_valueOffset, _maxCapacity);
                value.CopyTo(fullSlice);
            }
        }

        public ReadOnlyMemory<byte>? Field3
        {
            get
            {
                var length = this.Field3_Length;
                return length switch
                {
                    < 0 => null,
                    0 => ReadOnlyMemory<byte>.Empty,
                    _ => this.Field3_Values.Slice(0, length)
                };
            }
            set
            {
                if (value is null)
                {
                    this.Field3_Length = -1;
                }
                else if (value.Value.Length == 0)
                {
                    this.Field3_Length = 0;
                }
                else
                {
                    var length = value.Value.Length;
                    this.Field3_Values = value.Value.Slice(0, length);
                    this.Field3_Length = length;
                }
            }
        }

        public ushort Enum16_Data
        {
            get
            {
                const int _valueOffset = 16;
                return Codec_UInt16_LE.ReadFromSpan(_readonlyBlock.Slice(_valueOffset, 2).Span);
            }
            set
            {
                if (_frozen) ThrowIsFrozenException(nameof(Enum16_Data));
                const int _valueOffset = 16;
                Codec_UInt16_LE.WriteToSpan(_writableBlock.Slice(_valueOffset, 2).Span, value);
            }
        }

        public Kind16 Enum16
        {
            get => (Kind16)this.Enum16_Data;
            set => this.Enum16_Data = (ushort)value;
        }

        public ReadOnlyMemory<char> Field6
        {
            get
            {
                const int _fieldLength = 2;
                const int _arrayLength = 32;
                const int _totalLength = _fieldLength * _arrayLength;
                const int _valueOffset = 16;
                const bool _isBigEndian = false;
                var sourceSpan = _readonlyBlock.Slice(_valueOffset, _totalLength).Span;
                if (BitConverter.IsLittleEndian != _isBigEndian)
                {
                    // endian match
                    return MemoryMarshal.Cast<byte, char>(sourceSpan).ToArray(); // todo alloc!
                }
                else
                {
                    // endian mismatch - decode each element
                    var target = new char[_arrayLength]; // todo alloc!
                    var targetSpan = target.AsSpan();
                    for (int i = 0; i < _arrayLength; i++)
                    {
                        var elementSpan = sourceSpan.Slice(_fieldLength * i, _fieldLength);
                        targetSpan[i] = Codec_Char_LE.ReadFromSpan(elementSpan);
                    }
                    return target;
                }
            }

            set
            {
                const int _fieldLength = 2;
                const int _arrayLength = 32;
                const int _totalLength = _fieldLength * _arrayLength;
                const int _valueOffset = 16;
                const bool _isBigEndian = false;
                var sourceSpan = value.Span;
                var targetSpan = _writableBlock.Slice(_valueOffset, _totalLength).Span;
                targetSpan.Clear();
                if (BitConverter.IsLittleEndian != _isBigEndian)
                {
                    // endian match
                    sourceSpan.CopyTo(MemoryMarshal.Cast<byte, char>(targetSpan));
                }
                else
                {
                    // endian mismatch - encode each element
                    for (int i = 0; i < sourceSpan.Length; i++)
                    {
                        var elementSpan = targetSpan.Slice(_fieldLength * i, _fieldLength);
                        Codec_Char_LE.WriteToSpan(elementSpan, sourceSpan[i]);
                    }
                }
            }
        }

    }

}